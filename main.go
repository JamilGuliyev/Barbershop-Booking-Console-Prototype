package main

import (
	"fmt"
	"sync"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö

type Barber struct {
	ID    int
	Name  string
	Slots []string // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏
}

type Client struct {
	ID   int
	Name string
}

type Appointment struct {
	ClientID int
	BarberID int
	Slot     string
}

var (
	barbers          = make(map[int]*Barber) // –ò–∑–º–µ–Ω–µ–Ω–æ: —Ç–µ–ø–µ—Ä—å —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ Barber
	clients          = make(map[int]Client)
	appointments     = []Appointment{}
	barbersLock      sync.Mutex
	clientsLock      sync.Mutex
	appointmentsLock sync.Mutex
	nextBarberID     = 1
	nextClientID     = 1
)

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∞—Ä–±–µ—Ä–∞
func addBarber(name string, slots []string) {
	barbersLock.Lock()
	defer barbersLock.Unlock()

	barber := &Barber{
		ID:    nextBarberID,
		Name:  name,
		Slots: slots,
	}
	barbers[nextBarberID] = barber
	fmt.Printf("üíà –ë–∞—Ä–±–µ—Ä %s –¥–æ–±–∞–≤–ª–µ–Ω —Å ID %d\n", name, nextBarberID)
	nextBarberID++
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
func addClient(name string) {
	clientsLock.Lock()
	defer clientsLock.Unlock()

	client := Client{
		ID:   nextClientID,
		Name: name,
	}
	clients[nextClientID] = client
	fmt.Printf("üë§ –ö–ª–∏–µ–Ω—Ç %s –¥–æ–±–∞–≤–ª–µ–Ω —Å ID %d\n", name, nextClientID)
	nextClientID++
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –±–∞—Ä–±–µ—Ä–∞
func getAvailableSlots(barberID int) {
	barbersLock.Lock()
	defer barbersLock.Unlock()

	barber, exists := barbers[barberID]
	if !exists {
		fmt.Println("‚ùå –ë–∞—Ä–±–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	}

	fmt.Printf("üóì –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã —É –±–∞—Ä–±–µ—Ä–∞ %s:\n", barber.Name)
	for _, slot := range barber.Slots {
		fmt.Println("-", slot)
	}
}

// –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É –±–∞—Ä–±–µ—Ä–∞
func bookAppointment(clientID, barberID int, slot string) {
	barbersLock.Lock()
	appointmentsLock.Lock()
	defer barbersLock.Unlock()
	defer appointmentsLock.Unlock()

	barber, exists := barbers[barberID]
	if !exists {
		fmt.Println("‚ùå –ë–∞—Ä–±–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ—Ç –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
	for i, s := range barber.Slots {
		if s == slot {
			// –£–¥–∞–ª—è–µ–º —Å–ª–æ—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
			barber.Slots = append(barber.Slots[:i], barber.Slots[i+1:]...)
			appointments = append(appointments, Appointment{ClientID: clientID, BarberID: barberID, Slot: slot})
			fmt.Printf("‚úÖ –ö–ª–∏–µ–Ω—Ç %d –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª %s —É –±–∞—Ä–±–µ—Ä–∞ %s\n", clientID, slot, barber.Name)
			return
		}
	}
	fmt.Println("‚ùå –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
}

// –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
func cancelAppointment(clientID int, slot string) {
	appointmentsLock.Lock()
	defer appointmentsLock.Unlock()

	for i, appt := range appointments {
		if appt.ClientID == clientID && appt.Slot == slot {
			appointments = append(appointments[:i], appointments[i+1:]...)
			if barber, exists := barbers[appt.BarberID]; exists {
				barber.Slots = append(barber.Slots, slot)
			}
			fmt.Printf("‚ùå –ó–∞–ø–∏—Å—å –Ω–∞ %s –æ—Ç–º–µ–Ω–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º %d\n", slot, clientID)
			return
		}
	}
	fmt.Println("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
func showAppointments(clientID int) {
	fmt.Printf("üìã –ó–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ %d:\n", clientID)
	for _, appt := range appointments {
		if appt.ClientID == clientID {
			if barber, exists := barbers[appt.BarberID]; exists {
				fmt.Printf("- %s —Å –±–∞—Ä–±–µ—Ä–æ–º %s\n", appt.Slot, barber.Name)
			}
		}
	}
}

func main() {
	// –î–æ–±–∞–≤–ª—è–µ–º –±–∞—Ä–±–µ—Ä–æ–≤ –∏ –∫–ª–∏–µ–Ω—Ç–æ–≤
	addBarber("–ê–ª–µ–∫—Å–µ–π", []string{"10:00", "11:00", "12:00"})
	addBarber("–ò–≤–∞–Ω", []string{"14:00", "15:00"})
	addClient("–ü–µ—Ç—Ä")
	addClient("–°–µ—Ä–≥–µ–π")

	// –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
	getAvailableSlots(1)
	bookAppointment(1, 1, "10:00")
	bookAppointment(2, 1, "12:00")
	showAppointments(1)
	showAppointments(2)
	cancelAppointment(1, "10:00")
	showAppointments(1)
	getAvailableSlots(1)
}
