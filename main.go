package main

import (
	"fmt"
	"sync"
	"time"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö

type Barber struct {
	ID    int
	Name  string
	Slots []string // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏
}

type Client struct {
	ID   string
	Name string
}

type Appointment struct {
	ClientID string
	BarberID int
	Slot     string
}

var (
	barbers          = make(map[int]*Barber) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ Barber
	clients          = make(map[string]Client)
	appointments     = []Appointment{}
	barbersLock      sync.Mutex
	clientsLock      sync.Mutex
	appointmentsLock sync.Mutex
	nextBarberID     = 1
	clientCounter    = 1 // –°—á–µ—Ç—á–∏–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å
)

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
func generateClientID() string {
	today := time.Now().Format("02.01") // –î–î.–ú–ú
	id := fmt.Sprintf("%s.%04d", today, clientCounter)
	clientCounter++
	return id
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∞—Ä–±–µ—Ä–∞
func addBarber(name string, slots []string) {
	barbersLock.Lock()
	defer barbersLock.Unlock()

	barber := &Barber{
		ID:    nextBarberID,
		Name:  name,
		Slots: slots,
	}
	barbers[nextBarberID] = barber
	fmt.Printf("üíà –ë–∞—Ä–±–µ—Ä %s –¥–æ–±–∞–≤–ª–µ–Ω —Å ID %d\n", name, nextBarberID)
	nextBarberID++
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
func addClient(name string) {
	clientsLock.Lock()
	defer clientsLock.Unlock()

	clientID := generateClientID()
	client := Client{
		ID:   clientID,
		Name: name,
	}
	clients[clientID] = client
	fmt.Printf("üë§ –ö–ª–∏–µ–Ω—Ç %s –¥–æ–±–∞–≤–ª–µ–Ω —Å ID %s\n", name, clientID)
}

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Å–ª–æ—Ç–æ–≤ –±–∞—Ä–±–µ—Ä–∞
func getAvailableSlots(barberID int) {
	barbersLock.Lock()
	defer barbersLock.Unlock()

	barber, exists := barbers[barberID]
	if !exists {
		fmt.Println("‚ùå –ë–∞—Ä–±–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	}

	fmt.Printf("üóì –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã —É –±–∞—Ä–±–µ—Ä–∞ %s:\n", barber.Name)
	for _, slot := range barber.Slots {
		fmt.Println("-", slot)
	}
}

// –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É –±–∞—Ä–±–µ—Ä–∞
func bookAppointment(clientID string, barberID int, slot string) {
	barbersLock.Lock()
	appointmentsLock.Lock()
	defer barbersLock.Unlock()
	defer appointmentsLock.Unlock()

	barber, exists := barbers[barberID]
	if !exists {
		fmt.Println("‚ùå –ë–∞—Ä–±–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	}

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Å–ª–æ—Ç –≤ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
	for i, s := range barber.Slots {
		if s == slot {
			// –£–¥–∞–ª—è–µ–º —Å–ª–æ—Ç –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
			barber.Slots = append(barber.Slots[:i], barber.Slots[i+1:]...)
			appointments = append(appointments, Appointment{ClientID: clientID, BarberID: barberID, Slot: slot})
			fmt.Printf("‚úÖ –ö–ª–∏–µ–Ω—Ç %s –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª %s —É –±–∞—Ä–±–µ—Ä–∞ %s\n", clientID, slot, barber.Name)
			return
		}
	}
	fmt.Println("‚ùå –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
}

// –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
func cancelAppointment(clientID string, slot string) {
	appointmentsLock.Lock()
	defer appointmentsLock.Unlock()

	for i, appt := range appointments {
		if appt.ClientID == clientID && appt.Slot == slot {
			appointments = append(appointments[:i], appointments[i+1:]...)
			if barber, exists := barbers[appt.BarberID]; exists {
				barber.Slots = append(barber.Slots, slot)
			}
			fmt.Printf("‚ùå –ó–∞–ø–∏—Å—å –Ω–∞ %s –æ—Ç–º–µ–Ω–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç–æ–º %s\n", slot, clientID)
			return
		}
	}
	fmt.Println("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∑–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞
func showAppointments(clientID string) {
	fmt.Printf("üìã –ó–∞–ø–∏—Å–∏ –∫–ª–∏–µ–Ω—Ç–∞ %s:\n", clientID)
	for _, appt := range appointments {
		if appt.ClientID == clientID {
			if barber, exists := barbers[appt.BarberID]; exists {
				fmt.Printf("- %s —Å –±–∞—Ä–±–µ—Ä–æ–º %s\n", appt.Slot, barber.Name)
			}
		}
	}
}

func main() {
	for {
		var choice int
		fmt.Println("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		fmt.Println("1 - –î–æ–±–∞–≤–∏—Ç—å –±–∞—Ä–±–µ—Ä–∞")
		fmt.Println("2 - –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞")
		fmt.Println("3 - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã")
		fmt.Println("4 - –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è")
		fmt.Println("5 - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
		fmt.Println("6 - –ü–æ–∫–∞–∑–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
		fmt.Println("0 - –í—ã—Ö–æ–¥")
		fmt.Print("–í–∞—à –≤—ã–±–æ—Ä: ")
		fmt.Scanln(&choice)

		switch choice {
		case 1:
			var name string
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–∞—Ä–±–µ—Ä–∞: ")
			fmt.Scanln(&name)
			addBarber(name, []string{"10:00", "11:00", "12:00"})
		case 2:
			var name string
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –∫–ª–∏–µ–Ω—Ç–∞: ")
			fmt.Scanln(&name)
			addClient(name)
		case 3:
			var barberID int
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –±–∞—Ä–±–µ—Ä–∞: ")
			fmt.Scanln(&barberID)
			getAvailableSlots(barberID)
		case 4:
			var clientID string
			var barberID int
			var slot string
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞: ")
			fmt.Scanln(&clientID)
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –±–∞—Ä–±–µ—Ä–∞: ")
			fmt.Scanln(&barberID)
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è: ")
			fmt.Scanln(&slot)
			bookAppointment(clientID, barberID, slot)
		case 5:
			var clientID string
			var slot string
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞: ")
			fmt.Scanln(&clientID)
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è: ")
			fmt.Scanln(&slot)
			cancelAppointment(clientID, slot)
		case 6:
			var clientID string
			fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –∫–ª–∏–µ–Ω—Ç–∞: ")
			fmt.Scanln(&clientID)
			showAppointments(clientID)
		case 0:
			fmt.Println("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
			return
		default:
			fmt.Println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
		}
	}
}
