package main

import (
	"fmt"
	"sync"
	"time"
)

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–æ–ª–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
type Role string

const (
	ClientRole Role = "–ö–ª–∏–µ–Ω—Ç"
	BarberRole Role = "–ë–∞—Ä–±–µ—Ä"
)

// –°—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
type Barber struct {
	ID      int
	Name    string
	Slots   []string // –î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã –¥–ª—è –∑–∞–ø–∏—Å–∏
	Reviews []string // –û—Ç–∑—ã–≤—ã –æ –±–∞—Ä–±–µ—Ä–µ
}

type Client struct {
	ID   string
	Name string
	Role Role
}

type Appointment struct {
	ClientID string
	BarberID int
	Slot     string
	Date     string // –î–∞—Ç–∞ –∑–∞–ø–∏—Å–∏
}

var (
	barbers          = make(map[int]*Barber) // –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–∫–∞–∑–∞—Ç–µ–ª–∏ –Ω–∞ Barber
	clients          = make(map[string]Client)
	appointments     = []Appointment{}
	appointmentsLog  = []Appointment{} // –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π
	barbersLock      sync.Mutex
	clientsLock      sync.Mutex
	appointmentsLock sync.Mutex
	nextBarberID     = 1
	clientCounter    = 1 // –°—á–µ—Ç—á–∏–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤ –∑–∞ –¥–µ–Ω—å
)

// –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —É–Ω–∏–∫–∞–ª—å–Ω–æ–≥–æ ID –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞
func generateClientID() string {
	today := time.Now().Format("0201") // –î–î–ú–ú
	id := fmt.Sprintf("%s%04d", today, clientCounter)
	clientCounter++
	return id
}

// –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –≤—ã–±–æ—Ä–æ–º —Ä–æ–ª–∏
func registerUser(name string, role Role) string {
	clientsLock.Lock()
	defer clientsLock.Unlock()

	clientID := generateClientID()
	client := Client{
		ID:   clientID,
		Name: name,
		Role: role,
	}
	clients[clientID] = client

	fmt.Printf("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å %s –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω –∫–∞–∫ %s (ID: %s)\n", name, role, clientID)
	return clientID
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –±–∞—Ä–±–µ—Ä–∞
func addBarber(name string, slots []string) {
	barbersLock.Lock()
	defer barbersLock.Unlock()

	barber := &Barber{
		ID:    nextBarberID,
		Name:  name,
		Slots: slots,
	}
	barbers[nextBarberID] = barber
	fmt.Printf("üíà –ë–∞—Ä–±–µ—Ä %s –¥–æ–±–∞–≤–ª–µ–Ω —Å ID %d\n", name, nextBarberID)
	nextBarberID++
}

// –ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ —É –±–∞—Ä–±–µ—Ä–∞
func bookAppointment(clientID string) {
	barbersLock.Lock()
	appointmentsLock.Lock()
	defer barbersLock.Unlock()
	defer appointmentsLock.Unlock()

	var barberID int
	var slot string

	fmt.Print("–í–≤–µ–¥–∏—Ç–µ ID –±–∞—Ä–±–µ—Ä–∞: ")
	fmt.Scanln(&barberID)

	barber, exists := barbers[barberID]
	if !exists {
		fmt.Println("‚ùå –ë–∞—Ä–±–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
		return
	}

	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è (–ø—Ä–∏–º–µ—Ä: 11:00): ")
	fmt.Scanln(&slot)

	for i, s := range barber.Slots {
		if s == slot {
			barber.Slots = append(barber.Slots[:i], barber.Slots[i+1:]...)
			appt := Appointment{ClientID: clientID, BarberID: barberID, Slot: slot, Date: time.Now().Format("02-01-2006")}
			appointments = append(appointments, appt)
			fmt.Printf("‚úÖ –í—ã –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–ª–∏ %s —É –±–∞—Ä–±–µ—Ä–∞ %s\n", slot, barber.Name)
			return
		}
	}
	fmt.Println("‚ùå –°–ª–æ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω!")
}

// –û—Ç–º–µ–Ω–∞ –∑–∞–ø–∏—Å–∏
func cancelAppointment(clientID string) {
	appointmentsLock.Lock()
	defer appointmentsLock.Unlock()

	for i, appt := range appointments {
		if appt.ClientID == clientID {
			appointmentsLog = append(appointmentsLog, appt) // –ü–µ—Ä–µ–Ω–æ—Å–∏–º –≤ –∏—Å—Ç–æ—Ä–∏—é
			appointments = append(appointments[:i], appointments[i+1:]...)
			if barber, exists := barbers[appt.BarberID]; exists {
				barber.Slots = append(barber.Slots, appt.Slot)
			}
			fmt.Printf("‚ùå –ó–∞–ø–∏—Å—å –Ω–∞ %s –æ—Ç–º–µ–Ω–µ–Ω–∞\n", appt.Slot)
			return
		}
	}
	fmt.Println("‚ùå –ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
}

// –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞
func showCurrentAppointment(clientID string) {
	for _, appt := range appointments {
		if appt.ClientID == clientID {
			if barber, exists := barbers[appt.BarberID]; exists {
				fmt.Printf("üìå –í–∞—à–∞ —Ç–µ–∫—É—â–∞—è –∑–∞–ø–∏—Å—å: %s —É –±–∞—Ä–±–µ—Ä–∞ %s (%s)\n", appt.Slot, barber.Name, appt.Date)
				return
			}
		}
	}
	fmt.Println("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π.")
}

// –ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø–∏—Å–µ–π –∫–ª–∏–µ–Ω—Ç–∞
func showAppointmentHistory(clientID string) {
	fmt.Printf("üìñ –ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–ø–∏—Å–µ–π:\n")
	found := false
	for _, appt := range appointmentsLog {
		if appt.ClientID == clientID {
			if barber, exists := barbers[appt.BarberID]; exists {
				fmt.Printf("- %s —É –±–∞—Ä–±–µ—Ä–∞ %s (%s)\n", appt.Slot, barber.Name, appt.Date)
				found = true
			}
		}
	}
	if !found {
		fmt.Println("‚ùå –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø–∏—Å–µ–π –ø—É—Å—Ç–∞.")
	}
}

// –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (CLI)
func startCLI() {
	var userRole Role
	var clientID string

	fmt.Println("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å:")
	fmt.Println("1 - –Ø –∏—â—É –±–∞—Ä–±–µ—Ä–∞ (–ö–ª–∏–µ–Ω—Ç)")
	fmt.Println("2 - –Ø –±–∞—Ä–±–µ—Ä")
	var roleChoice int
	fmt.Scanln(&roleChoice)

	switch roleChoice {
	case 1:
		userRole = ClientRole
	case 2:
		userRole = BarberRole
	default:
		fmt.Println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
		return
	}

	var name string
	fmt.Print("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ")
	fmt.Scanln(&name)
	clientID = registerUser(name, userRole)

	for {
		fmt.Println("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
		if userRole == ClientRole {
			fmt.Println("1 - –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è")
			fmt.Println("2 - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Ç–µ–∫—É—â—É—é –∑–∞–ø–∏—Å—å")
			fmt.Println("3 - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∏—Å—Ç–æ—Ä–∏—é –∑–∞–ø–∏—Å–µ–π")
			fmt.Println("4 - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å")
		} else {
			fmt.Println("1 - –î–æ–±–∞–≤–∏—Ç—å –±–∞—Ä–±–µ—Ä–∞")
			fmt.Println("2 - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã")
			fmt.Println("3 - –ó–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –≤—Ä–µ–º—è –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞")
			fmt.Println("4 - –û—Ç–º–µ–Ω–∏—Ç—å –∑–∞–ø–∏—Å—å –∫–ª–∏–µ–Ω—Ç–∞")
		}
		fmt.Println("0 - –í—ã—Ö–æ–¥")

		var choice int
		fmt.Scanln(&choice)

		switch choice {
		case 0:
			fmt.Println("–í—ã—Ö–æ–¥ –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã.")
			return
		case 1:
			if userRole == ClientRole {
				bookAppointment(clientID)
			} else {
				var barberName string
				fmt.Print("–í–≤–µ–¥–∏—Ç–µ –∏–º—è –±–∞—Ä–±–µ—Ä–∞: ")
				fmt.Scanln(&barberName)
				addBarber(barberName, []string{"10:00", "11:00", "12:00"})
			}
		case 2:
			if userRole == ClientRole {
				showCurrentAppointment(clientID)
			} else {
				fmt.Println("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –±–∞—Ä–±–µ—Ä–æ–≤ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.")
			}
		case 3:
			if userRole == ClientRole {
				showAppointmentHistory(clientID)
			} else {
				fmt.Println("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –¥–ª—è –±–∞—Ä–±–µ—Ä–æ–≤ –µ—â–µ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω.")
			}
		case 4:
			cancelAppointment(clientID)
		default:
			fmt.Println("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤—ã–±–æ—Ä.")
		}
	}
}

// –ó–∞–ø—É—Å–∫ API-—Å–µ—Ä–≤–µ—Ä–∞
func main() {
	// –ó–∞–ø—É—Å–∫–∞–µ–º API —Å–µ—Ä–≤–µ—Ä –≤ —Ñ–æ–Ω–µ
	go startServer()

	// –ó–∞–ø—É—Å–∫–∞–µ–º CLI-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
	startCLI()
}
